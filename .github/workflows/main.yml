name: Build and Deploy on Pull Request

on:
  pull_request:
    branches: [ main, develop ]
    types: [ opened, synchronize, reopened ]
  push:
    branches: [ main, develop ]

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'

    - name: Install dependencies
      run: npm ci

    - name: Run tests
      run: npm test
      continue-on-error: true

    - name: Build application
      run: npm run build

    - name: Log in to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=sha,prefix={{branch}}-
          type=raw,value=latest,enable={{is_default_branch}}

    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

    - name: Deploy to remote host
      if: github.event_name == 'pull_request'
      uses: appleboy/ssh-action@v1.0.3
      with:
        host: ${{ secrets.REMOTE_HOST }}
        username: ${{ secrets.REMOTE_USER }}
        key: ${{ secrets.REMOTE_SSH_KEY }}
        port: ${{ secrets.REMOTE_PORT || 22 }}
        script: |
          # Set environment variables
          export IMAGE_NAME="${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}"
          export CONTAINER_NAME="${{ github.event.pull_request.head.ref }}-app"
          export PORT="${{ secrets.APP_PORT || 3000 }}"
          
          # Login to container registry
          echo ${{ secrets.GITHUB_TOKEN }} | docker login ${{ env.REGISTRY }} -u ${{ github.actor }} --password-stdin
          
          # Stop and remove existing container if it exists
          docker stop $CONTAINER_NAME 2>/dev/null || true
          docker rm $CONTAINER_NAME 2>/dev/null || true
          
          # Pull the latest image
          docker pull $IMAGE_NAME:${{ github.event.pull_request.head.ref }}
          
          # Run the new container
          docker run -d \
            --name $CONTAINER_NAME \
            --restart unless-stopped \
            -p $PORT:3000 \
            -e NODE_ENV=production \
            $IMAGE_NAME:${{ github.event.pull_request.head.ref }}
          
          # Clean up old images
          docker image prune -f
          
          echo "Deployment completed successfully!"
          echo "Application is running on port $PORT"

    - name: Deploy to production
      if: github.ref == 'refs/heads/main' && github.event_name == 'push'
      uses: appleboy/ssh-action@v1.0.3
      with:
        host: ${{ secrets.PROD_HOST }}
        username: ${{ secrets.PROD_USER }}
        key: ${{ secrets.PROD_SSH_KEY }}
        port: ${{ secrets.PROD_PORT || 22 }}
        script: |
          # Set environment variables
          export IMAGE_NAME="${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}"
          export CONTAINER_NAME="production-app"
          export PORT="${{ secrets.PROD_APP_PORT || 3000 }}"
          
          # Login to container registry
          echo ${{ secrets.GITHUB_TOKEN }} | docker login ${{ env.REGISTRY }} -u ${{ github.actor }} --password-stdin
          
          # Stop and remove existing container if it exists
          docker stop $CONTAINER_NAME 2>/dev/null || true
          docker rm $CONTAINER_NAME 2>/dev/null || true
          
          # Pull the latest image
          docker pull $IMAGE_NAME:latest
          
          # Run the new container
          docker run -d \
            --name $CONTAINER_NAME \
            --restart unless-stopped \
            -p $PORT:3000 \
            -e NODE_ENV=production \
            $IMAGE_NAME:latest
          
          # Clean up old images
          docker image prune -f
          
          echo "Production deployment completed successfully!"
          echo "Application is running on port $PORT"

    - name: Comment PR with deployment info
      if: github.event_name == 'pull_request'
      uses: actions/github-script@v7
      with:
        script: |
          const { data: comments } = await github.rest.issues.listComments({
            owner: context.repo.owner,
            repo: context.repo.repo,
            issue_number: context.issue.number,
          });
          
          const botComment = comments.find(comment => 
            comment.user.type === 'Bot' && comment.body.includes('ðŸš€ Deployment Status')
          );
          
          const deploymentUrl = `http://${{ secrets.REMOTE_HOST }}:${{ secrets.APP_PORT || 3000 }}`;
          const imageTag = `${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.event.pull_request.head.ref }}`;
          
          const commentBody = `## ðŸš€ Deployment Status
          
          **Status:** âœ… Successfully deployed
          **Environment:** Preview
          **URL:** ${deploymentUrl}
          **Docker Image:** \`${imageTag}\`
          **Branch:** \`${{ github.event.pull_request.head.ref }}\`
          
          Your changes have been deployed to the preview environment. You can test them at the URL above.
          
          ---
          *This comment will be updated automatically on each push to this PR.*`;
          
          if (botComment) {
            await github.rest.issues.updateComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              comment_id: botComment.id,
              body: commentBody
            });
          } else {
            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
              body: commentBody
            });
          }
